一.  雪崩问题
    一个微服务占用过多系统资源, 导致大批量服务不可用

二.  服务熔断
    1.原理
        Hystrix Command请求失败数量超过50%时, 断路器自动切换到开路状态, 所有请求直接失败, 而不会发送至调用的服务
        断路器保持开路5s后, 自动切换至半开路状态, 请求发送至调用的服务
            如果成功, 切换回闭路状态
            如果失败, 切换回开路状态

    2.开启方法:
        启动类上加@EnableCircuitBreaker, 开启熔断器
        如果是feign调用, 在配置中加上feign.hystrix.enabled = true

三.  服务降级
    1.服务降级(代码实现)
        触发熔断后, 客户端执行降级方法, 返回友好提示, 告知用户当前服务不可用

    2.服务降级的方式
        超时降级     调用服务超时, 超出后执行降级方法
        线程池模式   每一个请求都交于线程池中线程处理, 避免单一服务故障引发整个系统崩溃, 同时也会有任务调试和排序的问题, 超出核心线程数执行降级方法, 默认使用模式
        信号量模式   统计执行方法的请求数, 达到阈值则执行降级方法, 更为合理的利用线程数,

四.  服务熔断和降级的原理和差别
    1.原理    AOP
    2.差别     熔断一般由下游服务引起, 降级一般是上游自主的处理方式

五.  依赖隔离
    依赖隔离是指资源的隔离, 主要指线程

六.  服务限流
    服务熔断和降级都是服务限流的具体体现

