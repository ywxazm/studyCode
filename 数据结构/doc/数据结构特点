1.数组(列表)
    特点:有索引,包括一维数组+多维数组
    基本操作: insert,get,delete,size
    常见问题: 查找数组第二小的元素, 查找第一个没有重复的数组元素, 合并2个排序号的数据, 重新排列数组中的正数和负数
2.栈
    特点: 栈顶允许操作, 栈底不允许操作, 先进后出原则
    基本操作: Push（栈顶插入元素），Pop(返回栈最上方的元素，并删除），isEmpty（查询栈是否为空），Top（返回最上方元素，并不删除）
    常见问题: 栈常应用于实现递归功能方面的场景，例如斐波那契数列, Ctrl+Z操作
3.队列
    特点: 先进先出原则
    基本操作: Enqueue—在队列末尾插入元素，Dequeue—将队列第一个元素删除，isEmpty—查询队列是否为空，Top—返回队列的第一个元素
    常见问题: 使用队列实现栈，倒转队列的前K个元素，使用队列将1到n转换为二进制, 在多线程阻塞队列管理中非常适用
4.链表
    特点: 链表是一系列节点组成的链, 每一个节点保存了数据以及指向下一个节点的指针, 分为单向链表，双向链表
    基本操作: InsertAtEnd—在链表结尾插入元素，InsertAtHead—在链表开头插入元素，Delete—删除链表的指定元素，DeleteAtHead—删除链表第一个元素，Search—在链表中查询指定元素，isEmpty—查询链表是否为空
    常见问题: 倒转1个链表，检查链表中是否存在循环，返回链表倒数第N个元素，移除链表中的重复元素, 实现文件系统、哈希表和邻接表
5.图
    特点: 图(graph)由多个节点构成, 节点之间呆以互相连接组成一个网络, (x, y)表示一条边, 它表示节点x与y相连, 边可能会有权值, 分为无向图，有向图
    表现形式：邻接矩阵(Adjacency Matrix)，邻接表(Adjacency List)
    遍历图的两种算法：广度优先搜索(Breadth First Search)，深度优先搜索(Depth First Search)
    常见问题: 实现广度优先搜索，实现深度优先搜索，检查图是否为树，统计图中边的个数，使用Dijkstra算法查找两个节点之间的最短距离
6.树
    特点: 树是一种特殊的图, 由节点和连接节点的边组成, 它与图最大的区别是没有循环
    基本操作: N叉树(N-ary Tree)，平衡树(Balanced Tree)，二叉树(Binary Tree)，二叉查找树(Binary Search Tree)，平衡二叉树(AVL Tree)，红黑树(Red Black Tree)，2-3树(2–3 Tree)
    常见问题: 计算树的高度，查找二叉平衡树中第K大的元素，查找树中与根节点距离为k的节点，查找二叉树中某个节点所有祖先节点
7.哈希表
    特点: 哈希(Hash)将某个对象变换为唯一标识符，该标识符通常用一个短的随机字母和数字组成的字符串来代表
    基本操作: 哈希可以用来实现各种数据结构，其中最常用的就是哈希表(hash table), 哈希表通常由数组实现, 哈希表的性能取决于3个指标
    常见问题: 查找数组中对称的组合，确认某个数组的元素是否为另一个数组元素的子集，确认给定的数组是否互斥
8.前缀树
    特点: 前缀树(Prefix Trees或者Trie)与树类似，用于处理字符串相关的问题时非常高效
    常见问题: 它可以实现快速检索，常用于字典中的单词查询，搜索引擎的自动补全甚至IP路由